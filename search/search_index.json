{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"FilterWhere","text":"<p>Filter resources with request parameters. With this MODX Revolution package you can generate a xPDO where clause on base of request parameters. This where clause can i.e. be used as pdoRessources or getResources where property.</p>"},{"location":"#requirements","title":"Requirements","text":"<ul> <li>MODX Revolution 2.8+</li> <li>PHP 7.2+</li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li>Create a where clause to filter getResources/pdoResources results with the values of a request keys</li> <li>Set sanitized placeholders with the request values in <code>&lt;key&gt;_value</code></li> </ul>"},{"location":"#license","title":"License","text":"<p>The project is licensed under the GPLv2 license.</p>"},{"location":"#translations","title":"Translations","text":"<p>Translations of the package can be made for the Default Lexicon, the Properties Lexicon and the System Setting Lexicon</p>"},{"location":"contributors/","title":"Contributors","text":"<p>The FilterWhere project was started in 2021 by Thomas Jakobi.</p> <p>Many thanks to all who contributed, whether by creating pull requests, submitting bug reports, or donating.</p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#install-from-modx-extras","title":"Install from MODX Extras","text":"<p>Search for FilterWhere in the Package Manager of a MODX installation and install it in there.</p>"},{"location":"installation/#manual-installation","title":"Manual installation","text":"<p>If you can't access the MODX Extras Repository in your MODX installation, you can manually install FilterWhere.</p> <ul> <li>Download the transport package from MODX Extras (or one of the pre built transport packages in _packages)</li> <li>Upload the zip file to your MODX installation's <code>core/packages</code> folder or upload it manually in the MODX Package Manager.</li> <li>In the MODX Manager, navigate to the Package Manager page, and select 'Search locally for packages' from the dropdown button.</li> <li>FilterWhere should now show up in the list of available packages. Click the corresponding 'Install' button and follow the instructions to complete the installation.</li> </ul>"},{"location":"installation/#build-it-from-source","title":"Build it from source","text":"<p>To build and install the package from source you could use Git Package Management. The GitHub repository of FilterWhere contains a config.json to build that package locally. Use this option, if you want to debug FilterWhere  and/or contribute bugfixes and enhancements.</p>"},{"location":"usage/","title":"Usage","text":""},{"location":"usage/#introduction","title":"Introduction","text":"<p>With this MODX Revolution extra you can generate a xPDO where clause on base of request parameters. This where clause can i.e. be used as pdoRessources or getResources where property. That way you can filter MODX resources with request parameters.</p>"},{"location":"usage/#snippets","title":"Snippets","text":""},{"location":"usage/#filtergetresourceswhere","title":"FilterGetResourcesWhere","text":"<p>The FilterGetResourcesWhere snippet creates a where clause that can i.e. be used as pdoRessources or getResources where property. It has to be called uncached to work on the request values.</p> <p>The Snippet uses the following properties:</p> Property Description Default emptyRedirect ID of a resource, the user is redirected to, when the generated where clause is empty. - fields JSON encoded array of \u2018filter =&gt; resourcefield\u2019 combinations. - options JSON encoded array of filter operator options. - toPlaceholder If set, the snippet result will be assigned to this placeholder instead of outputting it directly. - type Type of the xPDO clause to filter the resources. Can be set to \u2018where\u2019 or \u2018having\u2019. Defaults to \u2018where\u2019. where varName Name of the superglobal variable that is searched for the filter values. REQUEST where JSON encoded xPDO where clause to filter the resources. - <p>The fields property uses the following syntax:</p> <pre><code>{\"&lt;request_key&gt;\":\"&lt;resource_fields&gt;::&lt;operator&gt;::&lt;junction&gt;\"}\n</code></pre> <p><code>request_key</code> contains the request key from which the value is retrieved. <code>resource_fields</code> contains a comma separated list of resource fields which are searched by the value. <code>operator</code> is optional and contains the xPDO query operator like <code>=</code>, <code>&gt;</code>, <code>LIKE</code> etc. It defaults to <code>=</code>. If the operator is <code>LIKE</code>, the searched value is surrounded with <code>%</code>, to create a wildcard search in the resource fields. <code>junction</code> is optional and can be set to define the junction between two search query parts. It defaults to empty, which means <code>AND</code> in an xPDO where clause.</p> <p>The sanitized values of each request key is set as placeholder in <code>&lt;key&gt;_value</code>.</p> <p>Using the <code>where</code> property, you can combine the created where clause with an additional where clause created i.e. with <code>TaggerGetResourcesWhere</code>.</p>"},{"location":"usage/#operators","title":"Operators","text":"<p>FilterWhere can use the default xPDO operators like </p> <p><code>=</code>, <code>&gt;</code>, <code>&lt;</code>, <code>&gt;=</code>, <code>&lt;=</code>, <code>!=</code>, <code>LIKE</code> and <code>IN</code></p> <p>If the operator <code>LIKE</code> is used, the query value is surrounded with <code>%</code>. If the operator <code>IN</code> is used, you maybe have to surround each requested value with quotes, if request values are not an array.</p> <p>There are some additional operators available with FilterWhere:</p> <ul> <li> <p><code>RANGE</code>: The requested value is separated at a <code>-</code> sign. The first part is used    as the start of the range and the last part as the end of the range.</p> </li> <li> <p><code>DATE</code>: The requested value will be parsed as valid date/time   string. The resulting   value will be used as the start of a date range. The value plus one day will   be used as the end of a date range. The start and end date can be formatted   with the <code>dateformat</code> option or set to <code>unixtime</code>.</p> </li> <li> <p><code>DATERANGE</code>: The requested value will be separated by a string referenced in   the <code>daterangeseparator</code> option. The two parts are parsed as valid date/time   string. The resulting   first two values will be used as the start and the end of a date range. The   start and end date can be formatted with the <code>dateformat</code> option or set to   <code>unixtime</code>.</p> </li> <li> <p><code>GEOCODE</code>: The requested value will be geocoded with Google Maps Geocoding   (the API Key has to be set in the system settings). The distance from the   resulting value to the location given by two values in the resource (lat/lng   separated by <code>||</code>) is calculated. This distance has to be smaller than the   requested <code>distance</code> value.</p> </li> </ul>"},{"location":"usage/#operator-options","title":"Operator Options","text":"<p>FilterGetResourcesWhere uses the following operator options in a JSON encoded value in the <code>options</code> property:</p> Option Description Default daterangeseparator The string, the requested value is separated with when the <code>DATERANGE</code> operator is used. <code>-</code> dateformat The values in start and end date can be formatted with the <code>dateformat</code> option or set to <code>unixtime</code>. <code>Y-m-d H:i:s</code>"},{"location":"usage/#examples","title":"Examples","text":""},{"location":"usage/#in-array","title":"In Array","text":"<p>Create a form on a page and prepend it with a FilterGetResourcesWhere call:</p> <pre><code>[[!FilterGetResourcesWhere?\n&amp;fields=`{ \"resource\":\"alias::IN\" }`\n&amp;toPlaceholder=`resourceswhere`\n]]\n&lt;form method=\"get\" action=\"[[~[[*id]]]]\"&gt;\n    &lt;div&gt;\n        &lt;input type=\"checkbox\" name=\"resource[]\" value=\"foo\" [[!+resource_value:FormItIsChecked=`foo`]]&gt;\n        &lt;label&gt;Foo&lt;/label&gt;\n    &lt;/div&gt;\n    &lt;div&gt;\n        &lt;input type=\"checkbox\" name=\"resource[]\" value=\"bar\" [[!+resource_value:FormItIsChecked=`bar`]]&gt;\n        &lt;label&gt;Bar&lt;/label&gt;\n    &lt;/div&gt;\n&lt;/form&gt;\n</code></pre> <p>This form will filter a getResources snippet call showing only resources with the <code>alias</code> 'foo' and/or 'bar', if one checkbox is enabled.</p>"},{"location":"usage/#range","title":"Range","text":"<p>Create a form on a page and prepend it with a FilterGetResourcesWhere call:</p> <pre><code>[[!FilterGetResourcesWhere?\n&amp;fields=`{ \"count\":\"count::RANGE\" }`\n&amp;toPlaceholder=`resourceswhere`\n]]\n&lt;form method=\"get\" action=\"[[~[[*id]]]]\"&gt;\n    &lt;div&gt;\n        &lt;input type=\"checkbox\" name=\"count\" value=\"0-2\" [[!+count_value:eq=`0-2`:then=`checked`:else=``]]&gt;\n        &lt;label&gt;Count 0-2&lt;/label&gt;\n    &lt;/div&gt;\n    &lt;div&gt;\n        &lt;input type=\"checkbox\" name=\"count\" value=\"2-4\" [[!+count_value:eq=`2-4`:then=`checked`:else=``]]&gt;\n        &lt;label&gt;Count 2-4&lt;/label&gt;\n    &lt;/div&gt;\n    &lt;div&gt;\n        &lt;input type=\"checkbox\" name=\"count\" value=\"4-\" [[!+count_value:eq=`4-`:then=`checked`:else=``]]&gt;\n        &lt;label&gt;Count 4+&lt;/label&gt;\n    &lt;/div&gt;                          \n&lt;/form&gt;\n</code></pre> <p>This form will filter a getResources snippet call showing resources if the TV value <code>count</code> is inside the range, if one checkbox is enabled.</p>"},{"location":"usage/#daterange","title":"Daterange","text":"<p>Create a form on a page and prepend it with a FilterGetResourcesWhere call:</p> <pre><code>[[!FilterGetResourcesWhere?\n&amp;fields=`{ \"daterange\":\"publishedon::DATERANGE\" }`\n&amp;options=`{ \"daterangeseparator\":\" - \", \"dateformat\":\"unixtime\" }`\n&amp;toPlaceholder=`resourceswhere`\n]]\n&lt;form method=\"get\" action=\"[[~[[*id]]]]\"&gt;\n    &lt;div&gt;\n        &lt;input type=\"text\" name=\"daterange\" value=\"[[!+daterange_value]]\"&gt;\n        &lt;label&gt;Daterange&lt;/label&gt;\n    &lt;/div&gt;\n&lt;/form&gt;\n</code></pre> <p>This form will filter a getResources snippet call showing resources in the daterange set in the daterange input (Example value: <code>2023-12-01 - 2023-12-30</code>).</p> <p>If the second part of the daterange is not set, the range has no end.</p>"},{"location":"usage/#geocode","title":"Geocode","text":"<p>Create a form on a page and prepend it with a FilterGetResourcesWhere call:</p> <pre><code>[[!FilterGetResourcesWhere?\n&amp;fields=`{ \"geolocation\":\"lat||lng::GEOCODE\" }`\n&amp;toPlaceholder=`resourceswhere`\n]]\n&lt;form method=\"get\" action=\"[[~[[*id]]]]\"&gt;\n    &lt;div&gt;\n        &lt;input type=\"text\" name=\"geolocation\" value=\"[[!+geolocation_value]]\"&gt;\n        &lt;select name=\"distance\"&gt;\n            &lt;option selected=\"true\" disabled [[!+distance_value:FormItIsSelected=``]]&gt;Distance&lt;/option&gt;\n            &lt;option value=\"5\" [[!+distance_value:FormItIsSelected=`5`]]&gt;5 km&lt;/option&gt;\n            &lt;option value=\"10\" [[!+distance_value:FormItIsSelected=`10`]]&gt;10 km&lt;/option&gt;\n            &lt;option value=\"25\" [[!+distance_value:FormItIsSelected=`25`]]&gt;25 km&lt;/option&gt;\n            &lt;option value=\"50\" [[!+distance_value:FormItIsSelected=`50`]]&gt;50 km&lt;/option&gt;\n        &lt;/select&gt;\n    &lt;/div&gt;                          \n&lt;/form&gt;\n</code></pre> <p>This form will filter a getResources snippet call showing resources with a max distance around the geocoded value, if the geocoded value is has a result and the distance is set. Otherwise, the result is empty.</p> <p>All forms use the following getResources snippet call.</p> <pre><code>[[!getResources?\n...\n&amp;where=`[[!+resourceswhere]]`\n]]\n</code></pre>"},{"location":"usage/#system-settings","title":"System Settings","text":"<p>FilterWhere uses the following system settings in the namespace <code>filterwhere</code>:</p> Key Name Description Default filterwhere.debug Debug Log debug information in the MODX error log. No filterwhere.google_maps_api_key Google Maps Geocoding API Key Request a Google Maps API Key with enabled Geocoding API. - filterwhere.google_maps_region Google Maps API Region Code Biasing Preferred region for the geocoding result. -"}]}