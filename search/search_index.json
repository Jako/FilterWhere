{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"FilterWhere Filter resources with request parameters. With this MODX Revolution package you can generate a xPDO where clause on base of request parameters. This where clause can i.e. be used as pdoRessources or getResources where property. Requirements MODX Revolution 2.8+ PHP v7.2+ Features Create a where clause to filter getResources/pdoResources results with the values of a request keys Set sanitized placeholders with the request values in <key>_value","title":"Description"},{"location":"#filterwhere","text":"Filter resources with request parameters. With this MODX Revolution package you can generate a xPDO where clause on base of request parameters. This where clause can i.e. be used as pdoRessources or getResources where property.","title":"FilterWhere"},{"location":"#requirements","text":"MODX Revolution 2.8+ PHP v7.2+","title":"Requirements"},{"location":"#features","text":"Create a where clause to filter getResources/pdoResources results with the values of a request keys Set sanitized placeholders with the request values in <key>_value","title":"Features"},{"location":"contributors/","text":"The FilterWhere project was started in 2021 by Thomas Jakobi . Many thanks to all who contributed, whether by creating pull requests, submitting bug reports, or donating.","title":"Contributors"},{"location":"installation/","text":"Install from MODX Extras Search for FilterWhere in the Package Manager of a MODX installation and install it in there. Manual installation If you can't access the MODX Extras Repository in your MODX installation, you can manually install FilterWhere. Download the transport package from MODX Extras (or one of the pre built transport packages in _packages ) Upload the zip file to your MODX installation's core/packages folder or upload it manually in the MODX Package Manager. In the MODX Manager, navigate to the Package Manager page, and select 'Search locally for packages' from the dropdown button. FilterWhere should now show up in the list of available packages. Click the corresponding 'Install' button and follow instructions to complete the installation. Build it from source To build and install the package from source you could use Git Package Management . The GitHub repository of FilterWhere contains a config.json to build that package locally. Use this option, if you want to debug FilterWhere and/or contribute bugfixes and enhancements.","title":"Installation"},{"location":"installation/#install-from-modx-extras","text":"Search for FilterWhere in the Package Manager of a MODX installation and install it in there.","title":"Install from MODX Extras"},{"location":"installation/#manual-installation","text":"If you can't access the MODX Extras Repository in your MODX installation, you can manually install FilterWhere. Download the transport package from MODX Extras (or one of the pre built transport packages in _packages ) Upload the zip file to your MODX installation's core/packages folder or upload it manually in the MODX Package Manager. In the MODX Manager, navigate to the Package Manager page, and select 'Search locally for packages' from the dropdown button. FilterWhere should now show up in the list of available packages. Click the corresponding 'Install' button and follow instructions to complete the installation.","title":"Manual installation"},{"location":"installation/#build-it-from-source","text":"To build and install the package from source you could use Git Package Management . The GitHub repository of FilterWhere contains a config.json to build that package locally. Use this option, if you want to debug FilterWhere and/or contribute bugfixes and enhancements.","title":"Build it from source"},{"location":"usage/","text":"Introduction With this MODX Revolution extra you can generate a xPDO where clause on base of request parameters. This where clause can i.e. be used as pdoRessources or getResources where property. That way you can filter MODX resources with request parameters. Snippets FilterGetResourcesWhere The FilterGetResourcesWhere snippet creates a where clause that can i.e. be used as pdoRessources or getResources where property. It has to be called uncached to work on the request values. The Snippet uses the following properties: Property Description Default fields JSON encoded array of filter => resourcefield combinations. - where JSON encoded xPDO where clause to filter the resources. - emptyRedirect ID of a resource, the user is redirected to, when the generated where clause is empty. - toPlaceholder If set, the snippet result will be assigned to this placeholder instead of outputting it directly. - varName Name of the superglobal variable that is searched for the filter values. REQUEST The fields property uses the following syntax in: {\"<request_key>\":\"<resource_fields>::<operator>::<junction>\"} request_key contains the request key from which the value is retrieved. resource_fields contains a comma separated list of resource fields which are searched by the value. operator is optional and contains the xPDO query operator like = , > , LIKE etc. It defaults to = . If the operator is LIKE , the searched value is surrounded with % , to create a wildcard search in the resource fields. junction is optional and can be set to define the junction between two search query parts. It defaults to empty, which means AND in an xPDO where clause. The sanitized values of each request key is set as placeholder in <key>_value . Using the where property, you can combine the created where clause with an additional where clause created i.e. with TaggerGetResourcesWhere .","title":"Usage"},{"location":"usage/#introduction","text":"With this MODX Revolution extra you can generate a xPDO where clause on base of request parameters. This where clause can i.e. be used as pdoRessources or getResources where property. That way you can filter MODX resources with request parameters.","title":"Introduction"},{"location":"usage/#snippets","text":"","title":"Snippets"},{"location":"usage/#filtergetresourceswhere","text":"The FilterGetResourcesWhere snippet creates a where clause that can i.e. be used as pdoRessources or getResources where property. It has to be called uncached to work on the request values. The Snippet uses the following properties: Property Description Default fields JSON encoded array of filter => resourcefield combinations. - where JSON encoded xPDO where clause to filter the resources. - emptyRedirect ID of a resource, the user is redirected to, when the generated where clause is empty. - toPlaceholder If set, the snippet result will be assigned to this placeholder instead of outputting it directly. - varName Name of the superglobal variable that is searched for the filter values. REQUEST The fields property uses the following syntax in: {\"<request_key>\":\"<resource_fields>::<operator>::<junction>\"} request_key contains the request key from which the value is retrieved. resource_fields contains a comma separated list of resource fields which are searched by the value. operator is optional and contains the xPDO query operator like = , > , LIKE etc. It defaults to = . If the operator is LIKE , the searched value is surrounded with % , to create a wildcard search in the resource fields. junction is optional and can be set to define the junction between two search query parts. It defaults to empty, which means AND in an xPDO where clause. The sanitized values of each request key is set as placeholder in <key>_value . Using the where property, you can combine the created where clause with an additional where clause created i.e. with TaggerGetResourcesWhere .","title":"FilterGetResourcesWhere"}]}